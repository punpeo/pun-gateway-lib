// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.2
// source: access/control/control.proto

package control

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Control_Test_FullMethodName                            = "/control.Control/test"
	Control_GetAuthToken_FullMethodName                    = "/control.Control/getAuthToken"
	Control_ParseAuthToken_FullMethodName                  = "/control.Control/parseAuthToken"
	Control_GetAdminFuncControl_FullMethodName             = "/control.Control/getAdminFuncControl"
	Control_GetProjectFuncControl_FullMethodName           = "/control.Control/getProjectFuncControl"
	Control_GetJurisdictionAdminFunControl_FullMethodName  = "/control.Control/getJurisdictionAdminFunControl"
	Control_GetAdminDataControl_FullMethodName             = "/control.Control/getAdminDataControl"
	Control_GetMenuAdminFuncControl_FullMethodName         = "/control.Control/getMenuAdminFuncControl"
	Control_GetAdminInfoByPhoneControl_FullMethodName      = "/control.Control/getAdminInfoByPhoneControl"
	Control_GetAdminIdsByDepartmentControl_FullMethodName  = "/control.Control/getAdminIdsByDepartmentControl"
	Control_VerifyFuncControl_FullMethodName               = "/control.Control/verifyFuncControl"
	Control_GetRoleJurisdictionAdminControl_FullMethodName = "/control.Control/getRoleJurisdictionAdminControl"
	Control_GetRoleProjectControl_FullMethodName           = "/control.Control/getRoleProjectControl"
	Control_GetRoleDataControl_FullMethodName              = "/control.Control/getRoleDataControl"
	Control_GetDeptJurisdictionAdminControl_FullMethodName = "/control.Control/getDeptJurisdictionAdminControl"
	Control_GetDeptDataControl_FullMethodName              = "/control.Control/getDeptDataControl"
	Control_GetDeptProjectControl_FullMethodName           = "/control.Control/getDeptProjectControl"
	Control_GetAdminDetail_FullMethodName                  = "/control.Control/getAdminDetail"
	Control_GetAdminRoleList_FullMethodName                = "/control.Control/getAdminRoleList"
	Control_CheckIsStaff_FullMethodName                    = "/control.Control/checkIsStaff"
)

// ControlClient is the client API for Control service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlClient interface {
	// test
	Test(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	// 生成token
	GetAuthToken(ctx context.Context, in *GetAuthTokenReq, opts ...grpc.CallOption) (*GetAuthTokenResp, error)
	// 解析token
	ParseAuthToken(ctx context.Context, in *ParseAuthTokenReq, opts ...grpc.CallOption) (*ParseAuthTokenResp, error)
	// 获取账号功能权限信息（页面功能）
	GetAdminFuncControl(ctx context.Context, in *GetAdminFuncControlReq, opts ...grpc.CallOption) (*GetAdminFuncControlResp, error)
	//获取项目权限信息
	GetProjectFuncControl(ctx context.Context, in *GetProjectFuncControlReq, opts ...grpc.CallOption) (*GetProjectFuncControlResp, error)
	//获取管辖员工权限
	GetJurisdictionAdminFunControl(ctx context.Context, in *GetJurisdictionAdminFuncControlReq, opts ...grpc.CallOption) (*GetJurisdictionAdminFuncControlResp, error)
	// 获取账号数据权限信息
	GetAdminDataControl(ctx context.Context, in *GetAdminDataControlReq, opts ...grpc.CallOption) (*GetAdminDataControlResp, error)
	// 获取账号菜单权限
	GetMenuAdminFuncControl(ctx context.Context, in *GetMenuAdminFuncControlReq, opts ...grpc.CallOption) (*GetMenuAdminFuncControlResp, error)
	//通过手机号码获取账号信息
	GetAdminInfoByPhoneControl(ctx context.Context, in *GetAdminInfoByPhoneControlReq, opts ...grpc.CallOption) (*GetAdminInfoByPhoneControlResp, error)
	//获取部门下的账号列表
	GetAdminIdsByDepartmentControl(ctx context.Context, in *GetAdminIdsByDepartmentControlReq, opts ...grpc.CallOption) (*GetAdminIdsByDepartmentControlResp, error)
	// 校验功能权限
	VerifyFuncControl(ctx context.Context, in *VerifyFuncControlReq, opts ...grpc.CallOption) (*VerifyFuncControlResp, error)
	//获取角色管辖权限
	GetRoleJurisdictionAdminControl(ctx context.Context, in *GetRoleJurisdictionAdminControlReq, opts ...grpc.CallOption) (*GetRoleJurisdictionAdminControlResp, error)
	//获取角色项目权限
	GetRoleProjectControl(ctx context.Context, in *GetRoleProjectControlReq, opts ...grpc.CallOption) (*GetRoleProjectControlResp, error)
	//获取角色可见字段权限
	GetRoleDataControl(ctx context.Context, in *GetRoleDataControlReq, opts ...grpc.CallOption) (*GetRoleDataControlResp, error)
	//获取部门管辖员工权限
	GetDeptJurisdictionAdminControl(ctx context.Context, in *GetDeptJurisdictionAdminControlReq, opts ...grpc.CallOption) (*GetDeptJurisdictionAdminControlResp, error)
	//获取部门可见字段权限
	GetDeptDataControl(ctx context.Context, in *GetDeptDataControlReq, opts ...grpc.CallOption) (*GetDeptDataControlResp, error)
	//获取部门管辖项目权限
	GetDeptProjectControl(ctx context.Context, in *GetDeptProjectControlReq, opts ...grpc.CallOption) (*GetDeptProjectControlResp, error)
	// 获取账号详情
	GetAdminDetail(ctx context.Context, in *GetAdminDetailReq, opts ...grpc.CallOption) (*GetAdminDetailResp, error)
	// 获取账号角色信息列表
	GetAdminRoleList(ctx context.Context, in *GetAdminRoleListReq, opts ...grpc.CallOption) (*GetAdminRoleListResp, error)
	// 检查是否公司员工
	CheckIsStaff(ctx context.Context, in *CheckStaffReq, opts ...grpc.CallOption) (*CheckStaffResp, error)
}

type controlClient struct {
	cc grpc.ClientConnInterface
}

func NewControlClient(cc grpc.ClientConnInterface) ControlClient {
	return &controlClient{cc}
}

func (c *controlClient) Test(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, Control_Test_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetAuthToken(ctx context.Context, in *GetAuthTokenReq, opts ...grpc.CallOption) (*GetAuthTokenResp, error) {
	out := new(GetAuthTokenResp)
	err := c.cc.Invoke(ctx, Control_GetAuthToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) ParseAuthToken(ctx context.Context, in *ParseAuthTokenReq, opts ...grpc.CallOption) (*ParseAuthTokenResp, error) {
	out := new(ParseAuthTokenResp)
	err := c.cc.Invoke(ctx, Control_ParseAuthToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetAdminFuncControl(ctx context.Context, in *GetAdminFuncControlReq, opts ...grpc.CallOption) (*GetAdminFuncControlResp, error) {
	out := new(GetAdminFuncControlResp)
	err := c.cc.Invoke(ctx, Control_GetAdminFuncControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetProjectFuncControl(ctx context.Context, in *GetProjectFuncControlReq, opts ...grpc.CallOption) (*GetProjectFuncControlResp, error) {
	out := new(GetProjectFuncControlResp)
	err := c.cc.Invoke(ctx, Control_GetProjectFuncControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetJurisdictionAdminFunControl(ctx context.Context, in *GetJurisdictionAdminFuncControlReq, opts ...grpc.CallOption) (*GetJurisdictionAdminFuncControlResp, error) {
	out := new(GetJurisdictionAdminFuncControlResp)
	err := c.cc.Invoke(ctx, Control_GetJurisdictionAdminFunControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetAdminDataControl(ctx context.Context, in *GetAdminDataControlReq, opts ...grpc.CallOption) (*GetAdminDataControlResp, error) {
	out := new(GetAdminDataControlResp)
	err := c.cc.Invoke(ctx, Control_GetAdminDataControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetMenuAdminFuncControl(ctx context.Context, in *GetMenuAdminFuncControlReq, opts ...grpc.CallOption) (*GetMenuAdminFuncControlResp, error) {
	out := new(GetMenuAdminFuncControlResp)
	err := c.cc.Invoke(ctx, Control_GetMenuAdminFuncControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetAdminInfoByPhoneControl(ctx context.Context, in *GetAdminInfoByPhoneControlReq, opts ...grpc.CallOption) (*GetAdminInfoByPhoneControlResp, error) {
	out := new(GetAdminInfoByPhoneControlResp)
	err := c.cc.Invoke(ctx, Control_GetAdminInfoByPhoneControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetAdminIdsByDepartmentControl(ctx context.Context, in *GetAdminIdsByDepartmentControlReq, opts ...grpc.CallOption) (*GetAdminIdsByDepartmentControlResp, error) {
	out := new(GetAdminIdsByDepartmentControlResp)
	err := c.cc.Invoke(ctx, Control_GetAdminIdsByDepartmentControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) VerifyFuncControl(ctx context.Context, in *VerifyFuncControlReq, opts ...grpc.CallOption) (*VerifyFuncControlResp, error) {
	out := new(VerifyFuncControlResp)
	err := c.cc.Invoke(ctx, Control_VerifyFuncControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetRoleJurisdictionAdminControl(ctx context.Context, in *GetRoleJurisdictionAdminControlReq, opts ...grpc.CallOption) (*GetRoleJurisdictionAdminControlResp, error) {
	out := new(GetRoleJurisdictionAdminControlResp)
	err := c.cc.Invoke(ctx, Control_GetRoleJurisdictionAdminControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetRoleProjectControl(ctx context.Context, in *GetRoleProjectControlReq, opts ...grpc.CallOption) (*GetRoleProjectControlResp, error) {
	out := new(GetRoleProjectControlResp)
	err := c.cc.Invoke(ctx, Control_GetRoleProjectControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetRoleDataControl(ctx context.Context, in *GetRoleDataControlReq, opts ...grpc.CallOption) (*GetRoleDataControlResp, error) {
	out := new(GetRoleDataControlResp)
	err := c.cc.Invoke(ctx, Control_GetRoleDataControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetDeptJurisdictionAdminControl(ctx context.Context, in *GetDeptJurisdictionAdminControlReq, opts ...grpc.CallOption) (*GetDeptJurisdictionAdminControlResp, error) {
	out := new(GetDeptJurisdictionAdminControlResp)
	err := c.cc.Invoke(ctx, Control_GetDeptJurisdictionAdminControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetDeptDataControl(ctx context.Context, in *GetDeptDataControlReq, opts ...grpc.CallOption) (*GetDeptDataControlResp, error) {
	out := new(GetDeptDataControlResp)
	err := c.cc.Invoke(ctx, Control_GetDeptDataControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetDeptProjectControl(ctx context.Context, in *GetDeptProjectControlReq, opts ...grpc.CallOption) (*GetDeptProjectControlResp, error) {
	out := new(GetDeptProjectControlResp)
	err := c.cc.Invoke(ctx, Control_GetDeptProjectControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetAdminDetail(ctx context.Context, in *GetAdminDetailReq, opts ...grpc.CallOption) (*GetAdminDetailResp, error) {
	out := new(GetAdminDetailResp)
	err := c.cc.Invoke(ctx, Control_GetAdminDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetAdminRoleList(ctx context.Context, in *GetAdminRoleListReq, opts ...grpc.CallOption) (*GetAdminRoleListResp, error) {
	out := new(GetAdminRoleListResp)
	err := c.cc.Invoke(ctx, Control_GetAdminRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) CheckIsStaff(ctx context.Context, in *CheckStaffReq, opts ...grpc.CallOption) (*CheckStaffResp, error) {
	out := new(CheckStaffResp)
	err := c.cc.Invoke(ctx, Control_CheckIsStaff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServer is the server API for Control service.
// All implementations must embed UnimplementedControlServer
// for forward compatibility
type ControlServer interface {
	// test
	Test(context.Context, *Ping) (*Pong, error)
	// 生成token
	GetAuthToken(context.Context, *GetAuthTokenReq) (*GetAuthTokenResp, error)
	// 解析token
	ParseAuthToken(context.Context, *ParseAuthTokenReq) (*ParseAuthTokenResp, error)
	// 获取账号功能权限信息（页面功能）
	GetAdminFuncControl(context.Context, *GetAdminFuncControlReq) (*GetAdminFuncControlResp, error)
	//获取项目权限信息
	GetProjectFuncControl(context.Context, *GetProjectFuncControlReq) (*GetProjectFuncControlResp, error)
	//获取管辖员工权限
	GetJurisdictionAdminFunControl(context.Context, *GetJurisdictionAdminFuncControlReq) (*GetJurisdictionAdminFuncControlResp, error)
	// 获取账号数据权限信息
	GetAdminDataControl(context.Context, *GetAdminDataControlReq) (*GetAdminDataControlResp, error)
	// 获取账号菜单权限
	GetMenuAdminFuncControl(context.Context, *GetMenuAdminFuncControlReq) (*GetMenuAdminFuncControlResp, error)
	//通过手机号码获取账号信息
	GetAdminInfoByPhoneControl(context.Context, *GetAdminInfoByPhoneControlReq) (*GetAdminInfoByPhoneControlResp, error)
	//获取部门下的账号列表
	GetAdminIdsByDepartmentControl(context.Context, *GetAdminIdsByDepartmentControlReq) (*GetAdminIdsByDepartmentControlResp, error)
	// 校验功能权限
	VerifyFuncControl(context.Context, *VerifyFuncControlReq) (*VerifyFuncControlResp, error)
	//获取角色管辖权限
	GetRoleJurisdictionAdminControl(context.Context, *GetRoleJurisdictionAdminControlReq) (*GetRoleJurisdictionAdminControlResp, error)
	//获取角色项目权限
	GetRoleProjectControl(context.Context, *GetRoleProjectControlReq) (*GetRoleProjectControlResp, error)
	//获取角色可见字段权限
	GetRoleDataControl(context.Context, *GetRoleDataControlReq) (*GetRoleDataControlResp, error)
	//获取部门管辖员工权限
	GetDeptJurisdictionAdminControl(context.Context, *GetDeptJurisdictionAdminControlReq) (*GetDeptJurisdictionAdminControlResp, error)
	//获取部门可见字段权限
	GetDeptDataControl(context.Context, *GetDeptDataControlReq) (*GetDeptDataControlResp, error)
	//获取部门管辖项目权限
	GetDeptProjectControl(context.Context, *GetDeptProjectControlReq) (*GetDeptProjectControlResp, error)
	// 获取账号详情
	GetAdminDetail(context.Context, *GetAdminDetailReq) (*GetAdminDetailResp, error)
	// 获取账号角色信息列表
	GetAdminRoleList(context.Context, *GetAdminRoleListReq) (*GetAdminRoleListResp, error)
	// 检查是否公司员工
	CheckIsStaff(context.Context, *CheckStaffReq) (*CheckStaffResp, error)
	mustEmbedUnimplementedControlServer()
}

// UnimplementedControlServer must be embedded to have forward compatible implementations.
type UnimplementedControlServer struct {
}

func (UnimplementedControlServer) Test(context.Context, *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedControlServer) GetAuthToken(context.Context, *GetAuthTokenReq) (*GetAuthTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthToken not implemented")
}
func (UnimplementedControlServer) ParseAuthToken(context.Context, *ParseAuthTokenReq) (*ParseAuthTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseAuthToken not implemented")
}
func (UnimplementedControlServer) GetAdminFuncControl(context.Context, *GetAdminFuncControlReq) (*GetAdminFuncControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminFuncControl not implemented")
}
func (UnimplementedControlServer) GetProjectFuncControl(context.Context, *GetProjectFuncControlReq) (*GetProjectFuncControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectFuncControl not implemented")
}
func (UnimplementedControlServer) GetJurisdictionAdminFunControl(context.Context, *GetJurisdictionAdminFuncControlReq) (*GetJurisdictionAdminFuncControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJurisdictionAdminFunControl not implemented")
}
func (UnimplementedControlServer) GetAdminDataControl(context.Context, *GetAdminDataControlReq) (*GetAdminDataControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminDataControl not implemented")
}
func (UnimplementedControlServer) GetMenuAdminFuncControl(context.Context, *GetMenuAdminFuncControlReq) (*GetMenuAdminFuncControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuAdminFuncControl not implemented")
}
func (UnimplementedControlServer) GetAdminInfoByPhoneControl(context.Context, *GetAdminInfoByPhoneControlReq) (*GetAdminInfoByPhoneControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminInfoByPhoneControl not implemented")
}
func (UnimplementedControlServer) GetAdminIdsByDepartmentControl(context.Context, *GetAdminIdsByDepartmentControlReq) (*GetAdminIdsByDepartmentControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminIdsByDepartmentControl not implemented")
}
func (UnimplementedControlServer) VerifyFuncControl(context.Context, *VerifyFuncControlReq) (*VerifyFuncControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyFuncControl not implemented")
}
func (UnimplementedControlServer) GetRoleJurisdictionAdminControl(context.Context, *GetRoleJurisdictionAdminControlReq) (*GetRoleJurisdictionAdminControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleJurisdictionAdminControl not implemented")
}
func (UnimplementedControlServer) GetRoleProjectControl(context.Context, *GetRoleProjectControlReq) (*GetRoleProjectControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleProjectControl not implemented")
}
func (UnimplementedControlServer) GetRoleDataControl(context.Context, *GetRoleDataControlReq) (*GetRoleDataControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleDataControl not implemented")
}
func (UnimplementedControlServer) GetDeptJurisdictionAdminControl(context.Context, *GetDeptJurisdictionAdminControlReq) (*GetDeptJurisdictionAdminControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeptJurisdictionAdminControl not implemented")
}
func (UnimplementedControlServer) GetDeptDataControl(context.Context, *GetDeptDataControlReq) (*GetDeptDataControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeptDataControl not implemented")
}
func (UnimplementedControlServer) GetDeptProjectControl(context.Context, *GetDeptProjectControlReq) (*GetDeptProjectControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeptProjectControl not implemented")
}
func (UnimplementedControlServer) GetAdminDetail(context.Context, *GetAdminDetailReq) (*GetAdminDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminDetail not implemented")
}
func (UnimplementedControlServer) GetAdminRoleList(context.Context, *GetAdminRoleListReq) (*GetAdminRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminRoleList not implemented")
}
func (UnimplementedControlServer) CheckIsStaff(context.Context, *CheckStaffReq) (*CheckStaffResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsStaff not implemented")
}
func (UnimplementedControlServer) mustEmbedUnimplementedControlServer() {}

// UnsafeControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlServer will
// result in compilation errors.
type UnsafeControlServer interface {
	mustEmbedUnimplementedControlServer()
}

func RegisterControlServer(s grpc.ServiceRegistrar, srv ControlServer) {
	s.RegisterService(&Control_ServiceDesc, srv)
}

func _Control_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).Test(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetAuthToken(ctx, req.(*GetAuthTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_ParseAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseAuthTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).ParseAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_ParseAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).ParseAuthToken(ctx, req.(*ParseAuthTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetAdminFuncControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminFuncControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetAdminFuncControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetAdminFuncControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetAdminFuncControl(ctx, req.(*GetAdminFuncControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetProjectFuncControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectFuncControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetProjectFuncControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetProjectFuncControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetProjectFuncControl(ctx, req.(*GetProjectFuncControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetJurisdictionAdminFunControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJurisdictionAdminFuncControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetJurisdictionAdminFunControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetJurisdictionAdminFunControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetJurisdictionAdminFunControl(ctx, req.(*GetJurisdictionAdminFuncControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetAdminDataControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminDataControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetAdminDataControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetAdminDataControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetAdminDataControl(ctx, req.(*GetAdminDataControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetMenuAdminFuncControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuAdminFuncControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetMenuAdminFuncControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetMenuAdminFuncControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetMenuAdminFuncControl(ctx, req.(*GetMenuAdminFuncControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetAdminInfoByPhoneControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminInfoByPhoneControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetAdminInfoByPhoneControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetAdminInfoByPhoneControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetAdminInfoByPhoneControl(ctx, req.(*GetAdminInfoByPhoneControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetAdminIdsByDepartmentControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminIdsByDepartmentControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetAdminIdsByDepartmentControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetAdminIdsByDepartmentControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetAdminIdsByDepartmentControl(ctx, req.(*GetAdminIdsByDepartmentControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_VerifyFuncControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyFuncControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).VerifyFuncControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_VerifyFuncControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).VerifyFuncControl(ctx, req.(*VerifyFuncControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetRoleJurisdictionAdminControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleJurisdictionAdminControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetRoleJurisdictionAdminControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetRoleJurisdictionAdminControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetRoleJurisdictionAdminControl(ctx, req.(*GetRoleJurisdictionAdminControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetRoleProjectControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleProjectControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetRoleProjectControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetRoleProjectControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetRoleProjectControl(ctx, req.(*GetRoleProjectControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetRoleDataControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleDataControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetRoleDataControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetRoleDataControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetRoleDataControl(ctx, req.(*GetRoleDataControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetDeptJurisdictionAdminControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeptJurisdictionAdminControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetDeptJurisdictionAdminControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetDeptJurisdictionAdminControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetDeptJurisdictionAdminControl(ctx, req.(*GetDeptJurisdictionAdminControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetDeptDataControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeptDataControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetDeptDataControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetDeptDataControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetDeptDataControl(ctx, req.(*GetDeptDataControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetDeptProjectControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeptProjectControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetDeptProjectControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetDeptProjectControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetDeptProjectControl(ctx, req.(*GetDeptProjectControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetAdminDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetAdminDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetAdminDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetAdminDetail(ctx, req.(*GetAdminDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetAdminRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetAdminRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetAdminRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetAdminRoleList(ctx, req.(*GetAdminRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_CheckIsStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckStaffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).CheckIsStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_CheckIsStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).CheckIsStaff(ctx, req.(*CheckStaffReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Control_ServiceDesc is the grpc.ServiceDesc for Control service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Control_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control.Control",
	HandlerType: (*ControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "test",
			Handler:    _Control_Test_Handler,
		},
		{
			MethodName: "getAuthToken",
			Handler:    _Control_GetAuthToken_Handler,
		},
		{
			MethodName: "parseAuthToken",
			Handler:    _Control_ParseAuthToken_Handler,
		},
		{
			MethodName: "getAdminFuncControl",
			Handler:    _Control_GetAdminFuncControl_Handler,
		},
		{
			MethodName: "getProjectFuncControl",
			Handler:    _Control_GetProjectFuncControl_Handler,
		},
		{
			MethodName: "getJurisdictionAdminFunControl",
			Handler:    _Control_GetJurisdictionAdminFunControl_Handler,
		},
		{
			MethodName: "getAdminDataControl",
			Handler:    _Control_GetAdminDataControl_Handler,
		},
		{
			MethodName: "getMenuAdminFuncControl",
			Handler:    _Control_GetMenuAdminFuncControl_Handler,
		},
		{
			MethodName: "getAdminInfoByPhoneControl",
			Handler:    _Control_GetAdminInfoByPhoneControl_Handler,
		},
		{
			MethodName: "getAdminIdsByDepartmentControl",
			Handler:    _Control_GetAdminIdsByDepartmentControl_Handler,
		},
		{
			MethodName: "verifyFuncControl",
			Handler:    _Control_VerifyFuncControl_Handler,
		},
		{
			MethodName: "getRoleJurisdictionAdminControl",
			Handler:    _Control_GetRoleJurisdictionAdminControl_Handler,
		},
		{
			MethodName: "getRoleProjectControl",
			Handler:    _Control_GetRoleProjectControl_Handler,
		},
		{
			MethodName: "getRoleDataControl",
			Handler:    _Control_GetRoleDataControl_Handler,
		},
		{
			MethodName: "getDeptJurisdictionAdminControl",
			Handler:    _Control_GetDeptJurisdictionAdminControl_Handler,
		},
		{
			MethodName: "getDeptDataControl",
			Handler:    _Control_GetDeptDataControl_Handler,
		},
		{
			MethodName: "getDeptProjectControl",
			Handler:    _Control_GetDeptProjectControl_Handler,
		},
		{
			MethodName: "getAdminDetail",
			Handler:    _Control_GetAdminDetail_Handler,
		},
		{
			MethodName: "getAdminRoleList",
			Handler:    _Control_GetAdminRoleList_Handler,
		},
		{
			MethodName: "checkIsStaff",
			Handler:    _Control_CheckIsStaff_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "access/control/control.proto",
}
